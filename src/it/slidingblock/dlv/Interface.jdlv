package it.slidingblock.dlv;
import java.util.*;
import it.slidingblock.core.*;
import it.slidingblock.core.block.*;
import java.awt.*;
public class Interface{
	public int key;
	public Interface()
	{
		key=0;
	}
	public ArrayList <Spostamenti> compute(World w){
		long begin=System.currentTimeMillis();
		int maxint=0;
		Point exitPoint=w.getMatrix().getExitCell();
		ExitCell exit=new ExitCell(exitPoint.x,exitPoint.y);
		Set<BKey> bKeyDLV=new HashSet<BKey>();
		ArrayList<Block> blocchiJ = w.getBlocks();
		Set<PosSposSu> posSposSu=new HashSet<PosSposSu>(); 
		ArrayList <Spostamenti> spostamenti=new ArrayList<Spostamenti>();	
		for (Block b: blocchiJ)
		{
			if(b.getId()>maxint)
				maxint=b.getId();
			posSposSu.add(new PosSposSu(b.getId(),b.getId()));
			posSposSu.add(new PosSposSu(b.getId(),0));
			if (b instanceof KeyBlock)
				key=b.getId();
			Point bk=w.getMatrix().getFirstPoint(b.getId());
			bKeyDLV.add(new BKey(b.getId(),bk.y,bk.x,0));				
		}
		Point keyPoint=w.getMatrix().getFirstPoint(key);
		if (keyPoint.y==exit.x&&keyPoint.x==exit.y)
			return spostamenti;
		resolve(spostamenti,key,w.getMatrix().getDiverse(),posSposSu,w.getMatrix().getCelle(),bKeyDLV,exit,maxint,w.getMatrix().getUp(),w.getMatrix().getLeft(),w.getMatrix().getRight(),w.getMatrix().getDown(),w.getMatrix().getAdiacenze());
		System.out.println("Tempo impiegato: "+(System.currentTimeMillis()-begin)+" millisecondi");
		System.out.println("Tempo impiegato: "+(System.currentTimeMillis()-begin)/1000+" secondi");
		System.out.println("Tempo impiegato: "+((System.currentTimeMillis()-begin)/1000)/60+" minuti");
		return spostamenti;
	}
	public void resolve(ArrayList <Spostamenti> spostamenti,int key,Set <Diversa> diversa,Set <PosSposSu> posSposSu,Set <Contiene> contiene,Set<BKey> bKeyDLV,ExitCell exit,int maxint,Set<Adiacenze> up,Set<Adiacenze>left,Set<Adiacenze>right,Set<Adiacenze>down,Set<Adiacenze>adiacenze)
	{
		<#
			//input e output per java
			in=key::key,diversa::diversa,contiene::contiene,posSposSu::posSpostSu,bKeyDLV::bKey,exit::uscita,right::right,left::left,up::up,down::down,adiacenze::adiacente;
			out=spostamenti::sposta;
			FILE="./solver.txt";
		#>
		.("-n=1")
		if_no_answerset
		{
			//_JDLV_INVOCATION_EXECUTING.addOption("-n=1, -N="+maxint);
			if (maxint<40)
			maxint+=3;
			resolve(spostamenti,key,diversa,posSposSu,contiene,bKeyDLV,exit,maxint,up,left,right,down,adiacenze);
		}
	}
}