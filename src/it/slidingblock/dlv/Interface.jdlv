package it.slidingblock.dlv;
import java.util.*;
import it.slidingblock.core.*;
import it.slidingblock.core.block.*;
import java.awt.*;
public class Interface{
	public int dim,turno=1,key=0;
	public Interface(int dim)
	{
		this.dim=dim;
	}
	public ArrayList <Spostamenti> compute(World w,int max){
		Point exitPoint=w.getMatrix().getExitCell();
		ExitCell exit=new ExitCell(exitPoint.x,exitPoint.y);
		Set<Blocco> blocchiDLV=new HashSet<Blocco>();
		Set<BKey> bKeyDLV=new HashSet<BKey>();
		ArrayList<Block> blocchiJ = w.getBlocks();
		ArrayList <Spostamenti> spostamenti=new ArrayList<Spostamenti>();		
		for (Block b: blocchiJ)
		{
			if (b instanceof KeyBlock)
				key=b.getId();
			Point bk=w.getMatrix().getFirstPoint(b.getId());
			bKeyDLV.add(new BKey(b.getId(),bk.y,bk.x,0));
			ArrayList<Point> temp=w.getMatrix().getPosition(b.getId());
			for (Point p:temp)
				blocchiDLV.add(new Blocco(b.getId(),p.x,p.y));
		}
		for(int i = 1; i < max; i++){
		<#+(Solver)
			turno(${i}).
		#>
		}
		<#(Solver)
			//input e output per java
			in=dim::dim,key::key,turno::turno,blocchiDLV::blocco,bKeyDLV::bKey,exit::uscita;
			out=spostamenti::sposta;
			FILE="./solver.txt";
		#>
		.("-n=1, -N=50")
		if_no_answerset
		{
			if(max<50){
				spostamenti = compute(w,max+1);
			}
		}
		return spostamenti;
	}
}