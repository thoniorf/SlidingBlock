package it.slidingblock.dlv;
import java.util.*;
import it.slidingblock.combinazioni.*;
import it.slidingblock.core.*;
import it.slidingblock.core.block.*;
import java.awt.*;
public class Interface{
	public int dim,key=0;
	public Interface(int dim)
	{
		this.dim=dim;
	}
	public ArrayList <SpostamentiC> compute(World w,int max){
		long start = System.currentTimeMillis();
		ArrayList<Point> cell = new ArrayList<Point>();
		for(int i = 0; i < dim; i++){
			for(int j = 0; j < dim; j++){
				cell.add(new Point(i,j));
			}
		}
		Set<Adiacenze> adiacenze = new HashSet<Adiacenze>();
		for(int i = 0; i < cell.size(); i++){
			for(int j = 0; j < cell.size(); j++){
				if(i!=j)
				{
					int rowI= cell.get(i).y;
					int colI= cell.get(i).x;
					int rowJ= cell.get(j).y;
					int colJ= cell.get(j).x;
					if(rowI == rowJ+1 && rowJ<dim){
						adiacenze.add(new Adiacenze(colI,rowI,colJ,rowJ));
						adiacenze.add(new Adiacenze(colJ,rowJ,colI,rowI));
					}else if(colI == colJ+1 && colJ<dim){
						adiacenze.add(new Adiacenze(colI,rowI,colJ,rowJ));
						adiacenze.add(new Adiacenze(colJ,rowJ,colI,rowI));
					}
				}
			}
		}
		Point exitPoint=w.getMatrix().getExitCell();
		ExitCell exit= new ExitCell(exitPoint.y,exitPoint.x);
		ArrayList<Block> blocchiJava=w.getBlocks();
		Set<Blocco> blocchiDLV= new HashSet<Blocco>();
		Set<Dimensione> blocchiDim= new HashSet<Dimensione>();
		Set<Pivot> pivot= new HashSet<Pivot>();
		Set<Contiene> contiene= new HashSet<Contiene>();
		Set<Integer> turni = new HashSet<Integer>();
		ArrayList<SpostamentiC> spostamenti= new ArrayList<SpostamentiC>();
		for(Block b:blocchiJava)
		{
			blocchiDLV.add(new Blocco(b.getId(),b.getWidth(),b.getHeigth()));
			blocchiDim.add(new Dimensione(b.getId(),b.getWidth()*b.getHeigth()));
			Point first=w.getMatrix().getFirstPoint(b.getId());
			pivot.add(new Pivot(b.getId(),0,first.x,first.y));
			for(Point p :w.getMatrix().getPosition(b.getId())){
				contiene.add(new Contiene(p.y,p.x,b.getId(),0));
			}
			if(b instanceof KeyBlock)
				key=b.getId();
		}
		
		for(int i = 1; i < max; i++){
			turni.add(i);
		}
		
		<#
			//input e output per java
			in=adiacenze::adiacente,turni::turno,key::key,blocchiDLV::blocco,blocchiDim::dim,pivot::pivot,contiene::contiene,exit::exit;
			out=spostamenti::sposta;
			FILE="./combinazioni.dlv";
		#>
		.("-n=1, -N=")
		if_no_answerset
		{
			System.out.println("Niente");
			spostamenti = compute(w,max+1);
		}
		System.out.println("Tempo: "+ (int)(System.currentTimeMillis() - start));
		return spostamenti;
	}
}