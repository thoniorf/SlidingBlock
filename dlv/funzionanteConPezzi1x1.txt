#maxint=10.
%composizione matrice
row(0..2).
col(0..2).
cella(X,Y):-col(X),row(Y).
%blocchi
blocco(1,0,0).
blocco(2,1,1).
blocco(3,1,2).
blocco(4,2,1).
blocco(5,2,2).
blocco(7,0,1).
blocco(6,0,2).
piena(X,Y):-cella(X,Y),blocco(_,X,Y).
contiene(B,X,Y,0):-cella(X,Y),blocco(B,X,Y).
contiene(0,X,Y,0):-cella(X,Y),not piena(X,Y).
id(B):-blocco(B,_,_).
nCPB(B,N):-id(B),#count{ID,X,Y:contiene(ID,X,Y,0),ID=B}=N,#int(N).
%keyBlock
key(7).
%uscita
uscita(2,0).
%turni
turno(T):-#int(T),T>0.
%adiacenze
adiacente(X,Y,X,Y1):- cella(X,Y),cella(X,Y1),Y1=Y+1.
adiacente(X,Y,X1,Y):- cella(X,Y),cella(X1,Y),X1=X+1.
adiacente(X,Y,X1,Y1) :- adiacente(X1,Y1,X,Y).

%%fino qua funziona%%

%spostamenti
sposta(B,X,Y,X1,Y1,T1) v nonSposta(B,X,Y,X1,Y1,T1):-contiene(B,X,Y,T),adiacente(X,Y,X1,Y1),contiene(0,X1,Y1,T),B>0,T1=T+1,uscita(N,M),key(K),contiene(G,N,M,T),G<>K,turno(T1).
spostatiIN(B,X,Y,T1):-sposta(B,_,_,X,Y,T1),turno(T1).
spostatiDA(B,X,Y,T1):-sposta(B,X,Y,_,_,T1),turno(T1).
ciao(B,X,Y,T):-contiene(B,X,Y,T),T=1.

%non è posssibile rimettere un blocco spostato nel turno precedente nella posizione d'origine
:-sposta(B,X,Y,X1,Y1,T1),contiene(B,X1,Y1,T),turno(T1),T=T1-1.

%iterazioni
contiene(B,X,Y,T):-spostatiIN(B,X,Y,T),turno(T).
contiene(0,X,Y,T):-spostatiDA(B,X,Y,T),turno(T).
contiene(B,X,Y,T1):-contiene(B,X,Y,T),T=T1-1,not spostatiDA(B,X,Y,T1),turno(T1),B>0.
contiene(0,X,Y,T1):-contiene(0,X,Y,T),T=T1-1,spostatiIN(B,H,J,T1),id(B),turno(T1),X<>H.
contiene(0,X,Y,T1):-contiene(0,X,Y,T),T=T1-1,spostatiIN(B,H,J,T1),id(B),turno(T1),Y<>J.
%testato e funziona

% si muove un solo blocco per turno e il numero di celle per blocco deve rimanere sempre uguale
:-turno(T),#count{B:sposta(B,_,_,_,_,T)}>1.
:-sposta(B,_,_,_,_,T),sposta(B1,_,_,_,_,T),B1!=B,turno(T).
:-id(B),B>0,turno(T),#count{ID,X,Y:contiene(ID,X,Y,T),ID=B}=N,#int(N),nCPB(B,NUM),NUM<>N.
%testato e funziona

%non è possibile che non ci sia una volta il blocco chiave nella posizione duscita
:- #count{B,X,Y,T:contiene(B,X,Y,T),key(B),uscita(X,Y)}<1.

%meno numero spostamenti possibili
:~id(B),#count{T:sposta(B,A,C,X,Y,T)}=N,#int(N).[N:1]
%testato e funziona

%non e possibile spostare in due direzioni diverse
%:-turno(T),#count{B,X,Y,V,Z:sposta(B,X,Y,V,Z,T)}>1.
%si puo fare sia nel modo su che questo giu
:-sposta(B,X,Y,X1,Y1,T),sposta(B,X,Y,X3,Y3,T),X3!=X1.
:-sposta(B,X,Y,X1,Y1,T),sposta(B,X,Y,X3,Y3,T),Y3!=Y1.
%testato e funziona
